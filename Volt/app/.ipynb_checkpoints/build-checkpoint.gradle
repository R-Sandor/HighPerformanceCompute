/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
}

def sparkJava17CompatibleJvmArgs = [
        "--add-opens=java.base/java.lang=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens=java.base/java.io=ALL-UNNAMED",
        "--add-opens=java.base/java.net=ALL-UNNAMED",
        "--add-opens=java.base/java.nio=ALL-UNNAMED",
        "--add-opens=java.base/java.util=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent=ALL-UNNAMED",
        "--add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
        "--add-opens=java.base/sun.nio.cs=ALL-UNNAMED",
        "--add-opens=java.base/sun.security.action=ALL-UNNAMED",
        "--add-opens=java.base/sun.util.calendar=ALL-UNNAMED",
        "--add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED"
]

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    // https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch-hadoop
    //implementation 'org.elasticsearch:elasticsearch-spark-30_2.13:8.12.2'
    // https://mvnrepository.com/artifact/org.apache.spark/spark-core
    implementation 'io.javalin:javalin:6.1.3'
    implementation 'org.apache.spark:spark-core_2.13:3.5.1'
    implementation 'org.apache.spark:spark-sql_2.13:3.5.1'
    implementation 'org.apache.spark:spark-mllib_2.13:3.5.1'
}

application {
    // Define the main class for the application.
    mainClass = 'volt.App'
    applicationDefaultJvmArgs = sparkJava17CompatibleJvmArgs
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		xml.destination = file("$buildDir/reports/coverage.xml")
	}
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
   	testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport // report is always generated after tests run.
}

tasks.named('run') {
  dependsOn('loadData')
}

task download {
    // Define your list of file URLs
    def fileUrls = [
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2002.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2003.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2004.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2005.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2006.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2007.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2008.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2009.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2010.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2011.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2012.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2013.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2014.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2015.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2016.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2017.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2018.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2019.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2020.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2021.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2022.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2023.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2024.json.zip',
        'https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.zip'
    ]

    doLast {
        // Create a directory to store downloaded files
        def downloadDir = file('data')
        downloadDir.mkdirs()

        // Download each file
        fileUrls.each { url ->
            def fileName = url.substring(url.lastIndexOf('/') + 1)
            def outputFile = new File(downloadDir, fileName)
            def checkFile = new File(downloadDir, fileName.substring(0, fileName.lastIndexOf('.')))

            if (!checkFile.exists()) {
                ant.get(src: url, dest: outputFile)
                println "Downloaded: $fileName"
                ant.unzip(src: outputFile, dest: downloadDir)
                outputFile.delete()
            } 
        }
    }
}

task certs(type:Exec) { 
  def confDir = file("../conf")
  def certFile = new File(confDir, "volt_store.jks")
  if (!certFile.exists()) {
      workingDir = confDir
      commandLine 'sh', "./certUtil.sh"
    } else { 
      commandLine 'echo', 'Certs already exist.'
    }
}


task loadData(type: JavaExec, dependsOn: ['download', 'certs']) { 
  group = "Execution"
  description = "Run the load data task"
  classpath = sourceSets.main.runtimeClasspath
  mainClass = "volt.dataloader.Loader"
  jvmArgs = sparkJava17CompatibleJvmArgs
}
